const fs = require('fs')

const convertToJson = require('../openidl-etl-statplan-processor/processor').convertTextRecordsToJson
const autoConverter = require('../openidl-etl-statplan-processor/converters/autoConverter').converter

test('verfiy hds premium data is correct', () => {
    let testPremiumRecordsText = fs.readFileSync('./test/PA_Premium_Output_v1.1.txt', 'utf-8')
    let jsonRecords = convertToJson(testPremiumRecordsText)
    expect(jsonRecords.length).toBe(10)
    let jsonRecord = jsonRecords[0]
    let hdsRecord = autoConverter(jsonRecord)
    expect(hdsRecord.Policy.LineOfBusiness).toBe('Auto')
    expect(hdsRecord.Policy.AccountingDate).toBe('2020-01-01')
    expect(hdsRecord.Policy.CompanyCode).toBe('TRVI')
    expect(hdsRecord.Policy.State).toBe('CT')
    expect(hdsRecord.Policy.Territory).toBe('00 ')
    expect(hdsRecord.Policy.OptionalZipCodeIndicator).toBe('Y')
    expect(hdsRecord.TransactionType).toBe('Premium or Cancellation')
    expect(hdsRecord.Policy.PremiumAmount).toBe(89.67)
    expect(hdsRecord.Policy.Program).toBe('ISO Program')
    expect(hdsRecord.Coverage.CoverageCategory).toBe('Liability')
    expect(hdsRecord.Coverage.Coverage).toBe('Bodily Injury Liability')
    expect(hdsRecord.Policy.Subline).toBe('Private Passenger Auto')
    expect(hdsRecord.Driver.OperatorAge).toBe('30 - 54')
    expect(hdsRecord.Driver.Gender).toBe('Male')
    expect(hdsRecord.Driver.MaritalStatus).toBe('Married')
    expect(hdsRecord.Vehicle.VehicleUse).toBe('Business')
    expect(hdsRecord.Vehicle.CommuteDistance).toBe('N/A')
    expect(hdsRecord.Vehicle.AnnualDistance).toBe('N/A')
    expect(hdsRecord.Vehicle.VehicleUseOperator).toBe('No Youthful Operator')
    expect(hdsRecord.Vehicle.VehiclePerformance).toBe('Standard')
    expect(hdsRecord.Driver.DriversTraining).toBe('N/A')
    expect(hdsRecord.Driver.GoodStudentDiscount).toBe('N/A')
    expect(hdsRecord.Driver.PenaltyPoints).toBe('0')
    expect(hdsRecord.Coverage.LiabilityLimitsName).toBe('Limits')
    expect(hdsRecord.Coverage.LiabilityLimitsAmount).toBe('$250,000/500,000')
    expect(hdsRecord.Coverage.DeductibleAmount).toBe('$750')
    expect(hdsRecord.Vehicle.BodyStyle).toBe('Truck (Not including Truck Tractors or Dump Trucks)')
    expect(hdsRecord.Vehicle.BodySize).toBe('Private Passenger')
    expect(hdsRecord.Vehicle.ModelYear).toBe('21')
    expect(hdsRecord.Coverage.UninsuredUnderinsuredMotorist).toBe('Property Damage')
    expect(hdsRecord.Coverage.Exposure).toBe(5)
    expect(hdsRecord.Coverage.MonthsCovered).toBe(2)
    expect(hdsRecord.Coverage.Terrorism).toBe('N/A')
    expect(hdsRecord.Coverage.SingleMultiCarRating).toBe('Not Applicable')
    expect(hdsRecord.Coverage.Packaging).toBe('Auto coverage written as an endorsement to a CMP, CPP or BOP policy.')
    expect(hdsRecord.Coverage.PoolAffiliation).toBe('Standard risk written in a pool, JUA or assigned risk facility, etc.')
    expect(hdsRecord.Policy.PolicyIdentifier).toBe('TRV789')
    expect(hdsRecord.Policy.NCProgramEnhancement).toBe('N/A')
    expect(hdsRecord.Policy.ZipCode).toBe('06074')
    expect(hdsRecord.Policy.ZipCodeSuffix).toBe('')
    expect(hdsRecord.Coverage.UMUIMStacking).toBe('UM and/or UIM limits stacked (per vehicle)')
    expect(hdsRecord.Vehicle.Symbol).toBe('05')
    expect(hdsRecord.Coverage.PassiveRestraintDiscount).toBe('Air Bags for both front seat occupants.')
    expect(hdsRecord.Coverage.AntiLockBrakesDiscount).toBe('Program offers an Anti-Lock Braking System discount on this coverage, but the vehicle does not qualify for the discount.')
    expect(hdsRecord.Coverage.AntiTheftDeviceDiscount).toBe('Vehicles with alarm only — with discount')
    expect(hdsRecord.Coverage.DefensiveDriverDiscount).toBe('Driver does not qualify for the defensive driver discount available on this coverage.')
    expect(hdsRecord.Coverage.PIPLimitsDeductible).toBe('Basic PIP coverage — Deductible applies')
    expect(hdsRecord.Coverage.RateClassCode).toBe('2')
    expect(hdsRecord.Coverage.ExperienceRatingModificationFactor).toBe('None')
    expect(hdsRecord.CompanyUse).toBe('')
    expect(hdsRecord.Vehicle.VIN).toBe('VIN56789073469789')
})

test('verfiy hds loss data is correct', () => {
    let testLossRecordsText = fs.readFileSync('./test/PA_Loss_Output_v1.1.txt', 'utf-8')
    let jsonRecords = convertToJson(testLossRecordsText)
    expect(jsonRecords.length).toBe(10)
    let jsonRecord = jsonRecords[0]
    let hdsRecord = autoConverter(jsonRecord)
    expect(hdsRecord.Policy.LineOfBusiness).toBe('Auto')
    expect(hdsRecord.Policy.AccountingDate).toBe('2020-01-01')
    expect(hdsRecord.Policy.CompanyCode).toBe('TRVI')
    expect(hdsRecord.Policy.State).toBe('CT')
    expect(hdsRecord.Policy.Territory).toBe('00 ')
    expect(hdsRecord.Policy.OptionalZipCodeIndicator).toBe('Y')
    expect(hdsRecord.TransactionType).toBe('Paid Loss')
    expect(hdsRecord.Claim.LossAmount).toBe(89.67)
    expect(hdsRecord.Policy.Program).toBe('ISO Program')
    expect(hdsRecord.Coverage.CoverageCategory).toBe('Liability')
    expect(hdsRecord.Coverage.Coverage).toBe('Bodily Injury Liability')
    expect(hdsRecord.Policy.Subline).toBe('Private Passenger Auto')
    expect(hdsRecord.Driver.OperatorAge).toBe('30 - 54')
    expect(hdsRecord.Driver.Gender).toBe('Male')
    expect(hdsRecord.Driver.MaritalStatus).toBe('Married')
    expect(hdsRecord.Vehicle.VehicleUse).toBe('Business')
    expect(hdsRecord.Vehicle.CommuteDistance).toBe('N/A')
    expect(hdsRecord.Vehicle.AnnualDistance).toBe('N/A')
    expect(hdsRecord.Vehicle.VehicleUseOperator).toBe('No Youthful Operator')
    expect(hdsRecord.Vehicle.VehiclePerformance).toBe('Standard')
    expect(hdsRecord.Driver.DriversTraining).toBe('N/A')
    expect(hdsRecord.Driver.GoodStudentDiscount).toBe('N/A')
    expect(hdsRecord.Driver.PenaltyPoints).toBe('0')
    expect(hdsRecord.Coverage.LiabilityLimitsName).toBe('Limits')
    expect(hdsRecord.Coverage.LiabilityLimitsAmount).toBe('$250,000/500,000')
    expect(hdsRecord.Coverage.DeductibleAmount).toBe('$750')
    expect(hdsRecord.Vehicle.BodyStyle).toBe('Truck (Not including Truck Tractors or Dump Trucks)')
    expect(hdsRecord.Vehicle.BodySize).toBe('Private Passenger')
    expect(hdsRecord.Vehicle.ModelYear).toBe('21')
    expect(hdsRecord.Coverage.UninsuredUnderinsuredMotorist).toBe('Property Damage')
    expect(hdsRecord.Claim.ClaimCount).toBe(1)
    expect(hdsRecord.Claim.CauseOfLoss).toBe('Death Limit Claim (New York only)')
    expect(hdsRecord.Coverage.Terrorism).toBe('N/A')
    expect(hdsRecord.Claim.AccidentDate).toBe('1992-11-01')
    expect(hdsRecord.Coverage.Packaging).toBe('Auto coverage written as an endorsement to a CMP, CPP or BOP policy.')
    expect(hdsRecord.Coverage.PoolAffiliation).toBe('Standard risk written in a pool, JUA or assigned risk facility, etc.')
    expect(hdsRecord.Claim.OccurrenceIdentifier).toBe('6')
    expect(hdsRecord.Claim.ClaimIdentifier).toBe('')
    expect(hdsRecord.Policy.NCProgramEnhancement).toBe('N/A')
    expect(hdsRecord.Policy.ZipCode).toBe('06074')
    expect(hdsRecord.Policy.ZipCodeSuffix).toBe('')
    expect(hdsRecord.Coverage.UMUIMStacking).toBe('UM and/or UIM limits stacked (per vehicle)')
    expect(hdsRecord.Vehicle.Symbol).toBe('05')
    expect(hdsRecord.Coverage.PassiveRestraintDiscount).toBe('Air Bags for both front seat occupants.')
    expect(hdsRecord.Coverage.AntiLockBrakesDiscount).toBe('Program offers an Anti-Lock Braking System discount on this coverage, but the vehicle does not qualify for the discount.')
    expect(hdsRecord.Coverage.AntiTheftDeviceDiscount).toBe('Vehicles with alarm only — with discount')
    expect(hdsRecord.Coverage.DefensiveDriverDiscount).toBe('Driver does not qualify for the defensive driver discount available on this coverage.')
    expect(hdsRecord.Coverage.PIPLimitsDeductible).toBe('Basic PIP coverage — Deductible applies')
    expect(hdsRecord.Coverage.RateClassCode).toBe('2')
    expect(hdsRecord.Claim.LimitedCodingLossTransaction).toBe('Loss Limited Coding (includes Paid Loss Limited Coding and Outstanding Loss Limited Coding)')
    expect(hdsRecord.CompanyUse).toBe('')
    expect(hdsRecord.Vehicle.VIN).toBe('VIN56789073469789')
})

